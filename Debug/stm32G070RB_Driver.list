
stm32G070RB_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005cc  000015cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c4  080005c4  000015cc  2**0
                  CONTENTS
  4 .ARM          00000000  080005c4  080005c4  000015cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c4  080005cc  000015cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c4  080005c4  000015c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005c8  080005c8  000015c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005cc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005cc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000881  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002d6  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00002150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007f  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000012e8  00000000  00000000  00002287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ce3  00000000  00000000  0000356f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004c36  00000000  00000000  00004252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00008e88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d0  00000000  00000000  00008ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080005ac 	.word	0x080005ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080005ac 	.word	0x080005ac

08000104 <delay>:

#define HIGH 0
#define BottonPressed HIGH

void delay(void)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i <= 5000000; i++ );
 800010a:	2300      	movs	r3, #0
 800010c:	607b      	str	r3, [r7, #4]
 800010e:	e002      	b.n	8000116 <delay+0x12>
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	3301      	adds	r3, #1
 8000114:	607b      	str	r3, [r7, #4]
 8000116:	687b      	ldr	r3, [r7, #4]
 8000118:	4a03      	ldr	r2, [pc, #12]	@ (8000128 <delay+0x24>)
 800011a:	4293      	cmp	r3, r2
 800011c:	d9f8      	bls.n	8000110 <delay+0xc>
}
 800011e:	46c0      	nop			@ (mov r8, r8)
 8000120:	46c0      	nop			@ (mov r8, r8)
 8000122:	46bd      	mov	sp, r7
 8000124:	b002      	add	sp, #8
 8000126:	bd80      	pop	{r7, pc}
 8000128:	004c4b40 	.word	0x004c4b40

0800012c <main>:

int main(void)
{
 800012c:	b590      	push	{r4, r7, lr}
 800012e:	b087      	sub	sp, #28
 8000130:	af00      	add	r7, sp, #0
	GPIO_Handle_t  GpioLed, GpioBotton;
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000132:	240c      	movs	r4, #12
 8000134:	193b      	adds	r3, r7, r4
 8000136:	2205      	movs	r2, #5
 8000138:	711a      	strb	r2, [r3, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800013a:	193b      	adds	r3, r7, r4
 800013c:	2201      	movs	r2, #1
 800013e:	715a      	strb	r2, [r3, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000140:	193b      	adds	r3, r7, r4
 8000142:	2202      	movs	r2, #2
 8000144:	719a      	strb	r2, [r3, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000146:	193b      	adds	r3, r7, r4
 8000148:	2200      	movs	r2, #0
 800014a:	721a      	strb	r2, [r3, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPubPdControl = GPIO_NO_PUPD;
 800014c:	193b      	adds	r3, r7, r4
 800014e:	2200      	movs	r2, #0
 8000150:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000152:	23a0      	movs	r3, #160	@ 0xa0
 8000154:	05db      	lsls	r3, r3, #23
 8000156:	2101      	movs	r1, #1
 8000158:	0018      	movs	r0, r3
 800015a:	f000 f85d 	bl	8000218 <GPIO_PeriClockControl>
	GpioLed.pGPIOx = GPIOA;
 800015e:	193b      	adds	r3, r7, r4
 8000160:	22a0      	movs	r2, #160	@ 0xa0
 8000162:	05d2      	lsls	r2, r2, #23
 8000164:	601a      	str	r2, [r3, #0]
	GPIO_Init(&GpioLed);
 8000166:	193b      	adds	r3, r7, r4
 8000168:	0018      	movs	r0, r3
 800016a:	f000 f8f5 	bl	8000358 <GPIO_Init>


	GpioBotton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800016e:	003b      	movs	r3, r7
 8000170:	220d      	movs	r2, #13
 8000172:	711a      	strb	r2, [r3, #4]
	GpioBotton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000174:	003b      	movs	r3, r7
 8000176:	2200      	movs	r2, #0
 8000178:	715a      	strb	r2, [r3, #5]
	GpioBotton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800017a:	003b      	movs	r3, r7
 800017c:	2202      	movs	r2, #2
 800017e:	719a      	strb	r2, [r3, #6]
	GpioBotton.GPIO_PinConfig.GPIO_PinPubPdControl = GPIO_NO_PUPD;
 8000180:	003b      	movs	r3, r7
 8000182:	2200      	movs	r2, #0
 8000184:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000186:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <main+0x94>)
 8000188:	2101      	movs	r1, #1
 800018a:	0018      	movs	r0, r3
 800018c:	f000 f844 	bl	8000218 <GPIO_PeriClockControl>
	GpioBotton.pGPIOx = GPIOC;
 8000190:	003b      	movs	r3, r7
 8000192:	4a0b      	ldr	r2, [pc, #44]	@ (80001c0 <main+0x94>)
 8000194:	601a      	str	r2, [r3, #0]
	GPIO_Init(&GpioBotton);
 8000196:	003b      	movs	r3, r7
 8000198:	0018      	movs	r0, r3
 800019a:	f000 f8dd 	bl	8000358 <GPIO_Init>

	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BottonPressed)
 800019e:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <main+0x94>)
 80001a0:	210d      	movs	r1, #13
 80001a2:	0018      	movs	r0, r3
 80001a4:	f000 f9af 	bl	8000506 <GPIO_ReadFromInputPin>
 80001a8:	1e03      	subs	r3, r0, #0
 80001aa:	d1f8      	bne.n	800019e <main+0x72>
		{
			delay();
 80001ac:	f7ff ffaa 	bl	8000104 <delay>
			GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_NO_5);
 80001b0:	23a0      	movs	r3, #160	@ 0xa0
 80001b2:	05db      	lsls	r3, r3, #23
 80001b4:	2105      	movs	r1, #5
 80001b6:	0018      	movs	r0, r3
 80001b8:	f000 f9be 	bl	8000538 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BottonPressed)
 80001bc:	e7ef      	b.n	800019e <main+0x72>
 80001be:	46c0      	nop			@ (mov r8, r8)
 80001c0:	50000800 	.word	0x50000800

080001c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001c4:	480d      	ldr	r0, [pc, #52]	@ (80001fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001c8:	e000      	b.n	80001cc <Reset_Handler+0x8>
 80001ca:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001cc:	480c      	ldr	r0, [pc, #48]	@ (8000200 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ce:	490d      	ldr	r1, [pc, #52]	@ (8000204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000208 <LoopForever+0xe>)
  movs r3, #0
 80001d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d4:	e002      	b.n	80001dc <LoopCopyDataInit>

080001d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001da:	3304      	adds	r3, #4

080001dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e0:	d3f9      	bcc.n	80001d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e2:	4a0a      	ldr	r2, [pc, #40]	@ (800020c <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000210 <LoopForever+0x16>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001e8:	e001      	b.n	80001ee <LoopFillZerobss>

080001ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001ec:	3204      	adds	r2, #4

080001ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f0:	d3fb      	bcc.n	80001ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001f2:	f000 f9b7 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001f6:	f7ff ff99 	bl	800012c <main>

080001fa <LoopForever>:

LoopForever:
  b LoopForever
 80001fa:	e7fe      	b.n	80001fa <LoopForever>
  ldr   r0, =_estack
 80001fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000204:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000208:	080005cc 	.word	0x080005cc
  ldr r2, =_sbss
 800020c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000210:	2000001c 	.word	0x2000001c

08000214 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000214:	e7fe      	b.n	8000214 <ADC_IRQHandler>
	...

08000218 <GPIO_PeriClockControl>:
*
* @note             - This function is essential for enabling the clock before any GPIO configuration or operation. Without enabling the clock, GPIO functions may not work as expected.
*******************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	000a      	movs	r2, r1
 8000222:	1cfb      	adds	r3, r7, #3
 8000224:	701a      	strb	r2, [r3, #0]
    if (EnorDi == ENABLE)
 8000226:	1cfb      	adds	r3, r7, #3
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d142      	bne.n	80002b4 <GPIO_PeriClockControl+0x9c>
    {
        if (pGPIOx == GPIOA)
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	23a0      	movs	r3, #160	@ 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	429a      	cmp	r2, r3
 8000236:	d106      	bne.n	8000246 <GPIO_PeriClockControl+0x2e>
        {
            GPIOA_PCLK_EN();
 8000238:	4b41      	ldr	r3, [pc, #260]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 800023a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800023c:	4b40      	ldr	r3, [pc, #256]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 800023e:	2101      	movs	r1, #1
 8000240:	430a      	orrs	r2, r1
 8000242:	635a      	str	r2, [r3, #52]	@ 0x34
        else if (pGPIOx == GPIOF)
        {
            GPIOF_PCLK_DI();
        }
    }
}
 8000244:	e078      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOB)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a3e      	ldr	r2, [pc, #248]	@ (8000344 <GPIO_PeriClockControl+0x12c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PeriClockControl+0x44>
            GPIOB_PCLK_EN();
 800024e:	4b3c      	ldr	r3, [pc, #240]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000252:	4b3b      	ldr	r3, [pc, #236]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000254:	2102      	movs	r1, #2
 8000256:	430a      	orrs	r2, r1
 8000258:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800025a:	e06d      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOC)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a3a      	ldr	r2, [pc, #232]	@ (8000348 <GPIO_PeriClockControl+0x130>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <GPIO_PeriClockControl+0x5a>
            GPIOC_PCLK_EN();
 8000264:	4b36      	ldr	r3, [pc, #216]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000268:	4b35      	ldr	r3, [pc, #212]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 800026a:	2104      	movs	r1, #4
 800026c:	430a      	orrs	r2, r1
 800026e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000270:	e062      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOD)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a35      	ldr	r2, [pc, #212]	@ (800034c <GPIO_PeriClockControl+0x134>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_PeriClockControl+0x70>
            GPIOD_PCLK_EN();
 800027a:	4b31      	ldr	r3, [pc, #196]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 800027c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800027e:	4b30      	ldr	r3, [pc, #192]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000280:	2108      	movs	r1, #8
 8000282:	430a      	orrs	r2, r1
 8000284:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000286:	e057      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOE)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a31      	ldr	r2, [pc, #196]	@ (8000350 <GPIO_PeriClockControl+0x138>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d106      	bne.n	800029e <GPIO_PeriClockControl+0x86>
            GPIOE_PCLK_EN();
 8000290:	4b2b      	ldr	r3, [pc, #172]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000294:	4b2a      	ldr	r3, [pc, #168]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000296:	2110      	movs	r1, #16
 8000298:	430a      	orrs	r2, r1
 800029a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800029c:	e04c      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOF)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000354 <GPIO_PeriClockControl+0x13c>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d148      	bne.n	8000338 <GPIO_PeriClockControl+0x120>
            GPIOF_PCLK_EN();
 80002a6:	4b26      	ldr	r3, [pc, #152]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002aa:	4b25      	ldr	r3, [pc, #148]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002ac:	2120      	movs	r1, #32
 80002ae:	430a      	orrs	r2, r1
 80002b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002b2:	e041      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        if (pGPIOx == GPIOA)
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	23a0      	movs	r3, #160	@ 0xa0
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClockControl+0xb4>
            GPIOA_PCLK_DI();
 80002be:	4b20      	ldr	r3, [pc, #128]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002c4:	2101      	movs	r1, #1
 80002c6:	438a      	bics	r2, r1
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002ca:	e035      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOB)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <GPIO_PeriClockControl+0x12c>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClockControl+0xca>
            GPIOB_PCLK_DI();
 80002d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002da:	2102      	movs	r1, #2
 80002dc:	438a      	bics	r2, r1
 80002de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002e0:	e02a      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOC)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a18      	ldr	r2, [pc, #96]	@ (8000348 <GPIO_PeriClockControl+0x130>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_PeriClockControl+0xe0>
            GPIOC_PCLK_DI();
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 80002f0:	2104      	movs	r1, #4
 80002f2:	438a      	bics	r2, r1
 80002f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002f6:	e01f      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOD)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a14      	ldr	r2, [pc, #80]	@ (800034c <GPIO_PeriClockControl+0x134>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_PeriClockControl+0xf6>
            GPIOD_PCLK_DI();
 8000300:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000306:	2108      	movs	r1, #8
 8000308:	438a      	bics	r2, r1
 800030a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800030c:	e014      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOE)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a0f      	ldr	r2, [pc, #60]	@ (8000350 <GPIO_PeriClockControl+0x138>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x10c>
            GPIOE_PCLK_DI();
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800031a:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 800031c:	2110      	movs	r1, #16
 800031e:	438a      	bics	r2, r1
 8000320:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000322:	e009      	b.n	8000338 <GPIO_PeriClockControl+0x120>
        else if (pGPIOx == GPIOF)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a0b      	ldr	r2, [pc, #44]	@ (8000354 <GPIO_PeriClockControl+0x13c>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d105      	bne.n	8000338 <GPIO_PeriClockControl+0x120>
            GPIOF_PCLK_DI();
 800032c:	4b04      	ldr	r3, [pc, #16]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 800032e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000330:	4b03      	ldr	r3, [pc, #12]	@ (8000340 <GPIO_PeriClockControl+0x128>)
 8000332:	2120      	movs	r1, #32
 8000334:	438a      	bics	r2, r1
 8000336:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40021000 	.word	0x40021000
 8000344:	50000400 	.word	0x50000400
 8000348:	50000800 	.word	0x50000800
 800034c:	50000c00 	.word	0x50000c00
 8000350:	50001000 	.word	0x50001000
 8000354:	50001400 	.word	0x50001400

08000358 <GPIO_Init>:
 * @note             - This function configures a GPIO pin's mode (input, output, alternate function, or analog), speed, pull-up/pull-down resistor settings, output type, and alternate functionality (if the pin is set to alternate mode).
 *                     It does not handle interrupt modes, which need to be configured separately.
 *******************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0; // temporary register
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]

    // 1. Configure the mode of the GPIO pin
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	795b      	ldrb	r3, [r3, #5]
 8000368:	2b03      	cmp	r3, #3
 800036a:	d820      	bhi.n	80003ae <GPIO_Init+0x56>
    {
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	001a      	movs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	791b      	ldrb	r3, [r3, #4]
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	409a      	lsls	r2, r3
 800037a:	0013      	movs	r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clearing
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	2103      	movs	r1, #3
 800038c:	4099      	lsls	r1, r3
 800038e:	000b      	movs	r3, r1
 8000390:	43db      	mvns	r3, r3
 8000392:	0019      	movs	r1, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	400a      	ands	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; // Setting
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	6819      	ldr	r1, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	430a      	orrs	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	e001      	b.n	80003b2 <GPIO_Init+0x5a>
    }
    else
    {
        // TODO: Handle interrupt mode configuration here
    	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
    	//2.Configure the GPIO port selection in SYSCFG_EXTICR

    	//3.Congigure the exti interrupt delivery using IMR
    }

    temp = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]

    // 2. Configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	799b      	ldrb	r3, [r3, #6]
 80003ba:	001a      	movs	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	409a      	lsls	r2, r3
 80003c4:	0013      	movs	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clearing
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	2103      	movs	r1, #3
 80003d6:	4099      	lsls	r1, r3
 80003d8:	000b      	movs	r3, r1
 80003da:	43db      	mvns	r3, r3
 80003dc:	0019      	movs	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	400a      	ands	r2, r1
 80003e4:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Setting
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6899      	ldr	r1, [r3, #8]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	430a      	orrs	r2, r1
 80003f4:	609a      	str	r2, [r3, #8]

    temp = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]

    // 3. Configure the pull-up/pull-down settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPubPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	79db      	ldrb	r3, [r3, #7]
 80003fe:	001a      	movs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	409a      	lsls	r2, r3
 8000408:	0013      	movs	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clearing
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	68da      	ldr	r2, [r3, #12]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	2103      	movs	r1, #3
 800041a:	4099      	lsls	r1, r3
 800041c:	000b      	movs	r3, r1
 800041e:	43db      	mvns	r3, r3
 8000420:	0019      	movs	r1, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	400a      	ands	r2, r1
 8000428:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp; // Setting
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	68d9      	ldr	r1, [r3, #12]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	430a      	orrs	r2, r1
 8000438:	60da      	str	r2, [r3, #12]

    temp = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]

    // 4. Configure the output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a1b      	ldrb	r3, [r3, #8]
 8000442:	001a      	movs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	409a      	lsls	r2, r3
 800044a:	0013      	movs	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing 1 bit
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	0019      	movs	r1, r3
 800045a:	2301      	movs	r3, #1
 800045c:	408b      	lsls	r3, r1
 800045e:	43db      	mvns	r3, r3
 8000460:	0019      	movs	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp; // Setting
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6859      	ldr	r1, [r3, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	430a      	orrs	r2, r1
 8000478:	605a      	str	r2, [r3, #4]

    temp = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]

    // 5. Configure the alternate functionality (if applicable)
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	795b      	ldrb	r3, [r3, #5]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d13b      	bne.n	80004fe <GPIO_Init+0x1a6>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791a      	ldrb	r2, [r3, #4]
 800048a:	240b      	movs	r4, #11
 800048c:	193b      	adds	r3, r7, r4
 800048e:	08d2      	lsrs	r2, r2, #3
 8000490:	701a      	strb	r2, [r3, #0]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791a      	ldrb	r2, [r3, #4]
 8000496:	250a      	movs	r5, #10
 8000498:	197b      	adds	r3, r7, r5
 800049a:	2107      	movs	r1, #7
 800049c:	400a      	ands	r2, r1
 800049e:	701a      	strb	r2, [r3, #0]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // Clearing
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	7812      	ldrb	r2, [r2, #0]
 80004a8:	3208      	adds	r2, #8
 80004aa:	0092      	lsls	r2, r2, #2
 80004ac:	58d1      	ldr	r1, [r2, r3]
 80004ae:	197b      	adds	r3, r7, r5
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	220f      	movs	r2, #15
 80004b6:	409a      	lsls	r2, r3
 80004b8:	0013      	movs	r3, r2
 80004ba:	43db      	mvns	r3, r3
 80004bc:	0018      	movs	r0, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	7812      	ldrb	r2, [r2, #0]
 80004c6:	4001      	ands	r1, r0
 80004c8:	3208      	adds	r2, #8
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	50d1      	str	r1, [r2, r3]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2)); // Setting
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	193a      	adds	r2, r7, r4
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	3208      	adds	r2, #8
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	58d1      	ldr	r1, [r2, r3]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7a5b      	ldrb	r3, [r3, #9]
 80004e0:	001a      	movs	r2, r3
 80004e2:	197b      	adds	r3, r7, r5
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	409a      	lsls	r2, r3
 80004ea:	0013      	movs	r3, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	193a      	adds	r2, r7, r4
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	4301      	orrs	r1, r0
 80004f8:	3208      	adds	r2, #8
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	50d1      	str	r1, [r2, r3]
    }
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b004      	add	sp, #16
 8000504:	bdb0      	pop	{r4, r5, r7, pc}

08000506 <GPIO_ReadFromInputPin>:
*
* @note             - This function reads the state of a specified GPIO pin and returns either 0 (low) or 1 (high).
*******************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	000a      	movs	r2, r1
 8000510:	1cfb      	adds	r3, r7, #3
 8000512:	701a      	strb	r2, [r3, #0]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	691a      	ldr	r2, [r3, #16]
 8000518:	1cfb      	adds	r3, r7, #3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	40da      	lsrs	r2, r3
 800051e:	0013      	movs	r3, r2
 8000520:	b2da      	uxtb	r2, r3
 8000522:	200f      	movs	r0, #15
 8000524:	183b      	adds	r3, r7, r0
 8000526:	2101      	movs	r1, #1
 8000528:	400a      	ands	r2, r1
 800052a:	701a      	strb	r2, [r3, #0]
	return value;
 800052c:	183b      	adds	r3, r7, r0
 800052e:	781b      	ldrb	r3, [r3, #0]
}
 8000530:	0018      	movs	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	b004      	add	sp, #16
 8000536:	bd80      	pop	{r7, pc}

08000538 <GPIO_ToggleOutputPin>:
*
* @note             - This function toggles the state of the specified GPIO pin by using a bitwise XOR operation on the output data register (ODR).
*******************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	000a      	movs	r2, r1
 8000542:	1cfb      	adds	r3, r7, #3
 8000544:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR ^= (1<<PinNumber);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	1cfa      	adds	r2, r7, #3
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	2101      	movs	r1, #1
 8000550:	4091      	lsls	r1, r2
 8000552:	000a      	movs	r2, r1
 8000554:	405a      	eors	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2600      	movs	r6, #0
 8000568:	4c0c      	ldr	r4, [pc, #48]	@ (800059c <__libc_init_array+0x38>)
 800056a:	4d0d      	ldr	r5, [pc, #52]	@ (80005a0 <__libc_init_array+0x3c>)
 800056c:	1b64      	subs	r4, r4, r5
 800056e:	10a4      	asrs	r4, r4, #2
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	2600      	movs	r6, #0
 8000576:	f000 f819 	bl	80005ac <_init>
 800057a:	4c0a      	ldr	r4, [pc, #40]	@ (80005a4 <__libc_init_array+0x40>)
 800057c:	4d0a      	ldr	r5, [pc, #40]	@ (80005a8 <__libc_init_array+0x44>)
 800057e:	1b64      	subs	r4, r4, r5
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	00b3      	lsls	r3, r6, #2
 800058a:	58eb      	ldr	r3, [r5, r3]
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	00b3      	lsls	r3, r6, #2
 8000594:	58eb      	ldr	r3, [r5, r3]
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c8 	.word	0x080005c8
 80005a8:	080005c4 	.word	0x080005c4

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
